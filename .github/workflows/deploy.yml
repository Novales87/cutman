name: Deploy to CloudPanel

on:
  push:
    branches: [ "githubaction" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prueba # Especifica el entorno para acceder a los secretos de entorno
    steps:
      - name: Verificar secrets
        run: |
          echo "Verificando variables:"
          echo "Host: 200.58.121.145"
          echo "Port: 5931"
          echo "Username: armydevs-cutman"
          echo "Password: ${{ secrets.VPS_PASSWORD && '***** (configurado)' || 'NO CONFIGURADO' }}"

      - name: Despliegue por SSH con contraseña
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: "200.58.121.145"
          port: "5931"
          username: "armydevs-cutman"
          password: ${{ secrets.VPS_PASSWORD }}
          timeout: 120s # Aumentar el timeout inicial para conexiones lentas
          command_timeout: 15m # Aumentar el timeout para comandos largos (npm install/build)
          envs: GITHUB_REPOSITORY=${{ github.repository }}
          debug: true
          script: |
            REPO_DIR="/home/armydevs-cutman/repo-cutman" # Directorio temporal para el repositorio
            DEPLOY_DIR="/home/armydevs-cutman/htdocs/cutman.armydevs.com" # Directorio donde se desplegará la aplicación (según CloudPanel)

            # Instalar Node.js y npm si no están presentes
            if ! command -v node &> /dev/null
            then
                echo "Node.js no encontrado. Instalando..."
                curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
                export NVM_DIR="$HOME/.nvm"
                [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
                [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
                nvm install node # Instala la última versión LTS de Node.js
                nvm use node
                echo "Node.js y npm instalados."
            else
                echo "Node.js ya está instalado."
            fi

            # Crear directorio del repositorio si no existe
            mkdir -p $REPO_DIR
            cd $REPO_DIR

            # Clonar o actualizar el repo
            if [ ! -d ".git" ]; then
              git clone https://github.com/${{ github.repository }}.git .
            fi

            git fetch origin
            git checkout githubaction
            git pull origin githubaction

            # Instalar dependencias y build
            npm install --force # Usar --force si hay problemas con dependencias
            npm run build

            # Asegurarse de que el directorio de despliegue exista
            mkdir -p $DEPLOY_DIR

            # Limpiar el directorio de despliegue y mover archivos build
            # Asegúrate de que DEPLOY_DIR sea el directorio público de tu sitio
            rm -rf $DEPLOY_DIR/* # Elimina todo el contenido del directorio de despliegue
            cp -r dist/* $DEPLOY_DIR/ # Copia el contenido de dist directamente a htdocs

            # Health check básico
            if [ -f "$DEPLOY_DIR/index.html" ]; then
              echo "✔️ Despliegue exitoso"
            else
              echo "❌ Error en el despliegue: index.html no encontrado en $DEPLOY_DIR"
              exit 1
            fi
